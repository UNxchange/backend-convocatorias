#!/usr/bin/env python3
"""
Script para probar todos los endpoints del backend de convocatorias
"""
import requests
import json
import time

BASE_URL = "http://localhost:8008"

def test_endpoints():
    print("üß™ PROBANDO ENDPOINTS DEL BACKEND")
    print("=" * 50)
    
    # Test 1: Endpoint ra√≠z
    print("\n1Ô∏è‚É£ Probando endpoint ra√≠z...")
    try:
        response = requests.get(f"{BASE_URL}/")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 2: Listar todas las convocatorias
    print("\n2Ô∏è‚É£ Probando GET /convocatorias...")
    try:
        response = requests.get(f"{BASE_URL}/convocatorias")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Total convocatorias: {len(data)}")
        if data:
            print(f"   Primera convocatoria: {data[0]['institution']} - {data[0]['country']}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 3: B√∫squeda por pa√≠s
    print("\n3Ô∏è‚É£ Probando filtro por pa√≠s (Alemania)...")
    try:
        response = requests.get(f"{BASE_URL}/convocatorias?country=Alemania")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Convocatorias en Alemania: {len(data)}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 4: B√∫squeda por idioma
    print("\n4Ô∏è‚É£ Probando filtro por idioma (ingl√©s)...")
    try:
        response = requests.get(f"{BASE_URL}/convocatorias?language=ingl√©s")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Convocatorias en ingl√©s: {len(data)}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 5: B√∫squeda por estado
    print("\n5Ô∏è‚É£ Probando filtro por estado (Vigente)...")
    try:
        response = requests.get(f"{BASE_URL}/convocatorias?state=Vigente")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Convocatorias vigentes: {len(data)}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 6: B√∫squeda de texto libre
    print("\n6Ô∏è‚É£ Probando b√∫squeda de texto libre (Universidad)...")
    try:
        response = requests.get(f"{BASE_URL}/convocatorias?q=Universidad")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Resultados para 'Universidad': {len(data)}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 7: Paginaci√≥n
    print("\n7Ô∏è‚É£ Probando paginaci√≥n (limit=5)...")
    try:
        response = requests.get(f"{BASE_URL}/convocatorias?limit=5")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Resultados con l√≠mite 5: {len(data)}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 8: Obtener convocatoria espec√≠fica (usando el ID del primer resultado)
    print("\n8Ô∏è‚É£ Probando GET convocatoria espec√≠fica...")
    try:
        # Primero obtenemos una convocatoria para tener un ID v√°lido
        response = requests.get(f"{BASE_URL}/convocatorias?limit=1")
        if response.status_code == 200 and response.json():
            conv_id = response.json()[0]['id']
            response = requests.get(f"{BASE_URL}/convocatorias/{conv_id}")
            print(f"   Status: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   Instituci√≥n: {data['institution']}")
                print(f"   Pa√≠s: {data['country']}")
        else:
            print("   ‚ùå No se pudo obtener ID de prueba")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    print("\n‚úÖ PRUEBAS COMPLETADAS")
    print("üåê Puedes ver la documentaci√≥n en: http://localhost:8008/docs")

if __name__ == "__main__":
    # Esperar un momento para que el servidor est√© listo
    print("‚è≥ Esperando que el servidor est√© listo...")
    time.sleep(2)
    test_endpoints()